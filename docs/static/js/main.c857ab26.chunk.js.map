{"version":3,"sources":["components/ChessBoard/ChessBoard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ErrorMessage","Chess","require","historyData","ChessBoard","useState","img","setImg","coordinates","setCoordinates","errorMessage","setErrorMessage","playerTurn","setPlayerMove","statusHistory","setStatusHistory","gameOver","setGameOver","chess","handleMakeMove","event","preventDefault","length","REQUIRED_FIELD","INVALID_DATA","result","move","sloppy","color","push","newImg","fen","game_over","MOVE_IMPOSSIBLE","className","src","alt","GAME_OVER","onSubmit","type","value","onChange","e","target","onClick","map","item","from","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oKAIKA,E,sDAFCC,G,MAAQC,EAAQ,M,SAEjBF,K,4TAAAA,E,8LAAAA,E,iIAAAA,E,kKAAAA,M,KAOL,IAAMG,EAAqB,GAwEZC,EAtEc,WAAO,IAAD,EACTC,mBAAS,4DADA,mBACxBC,EADwB,KACnBC,EADmB,OAEOF,mBAAS,IAFhB,mBAExBG,EAFwB,KAEXC,EAFW,OAGSJ,mBAAS,IAHlB,mBAGxBK,EAHwB,KAGVC,EAHU,OAIKN,mBAAS,KAJd,mBAIxBO,EAJwB,KAIZC,EAJY,OAKWR,oBAAS,GALpB,mBAKxBS,EALwB,KAKTC,EALS,OAMCV,oBAAS,GANV,mBAMxBW,EANwB,KAMdC,EANc,KAOzBC,EAAQ,IAAIjB,EAAMK,GAElBa,EAAiB,SAACC,GAEpB,GADAA,EAAMC,iBACFb,EAAYc,OAAS,EAErB,OADAX,EAAgBX,EAAauB,iBACtB,EACJ,GAAIf,EAAYc,OAAS,GAAKd,EAAYc,OAAS,EAEtD,OADAX,EAAgBX,EAAawB,eACtB,EAGX,IAAMC,EAASP,EAAMQ,KAAKlB,EAAa,CAAEmB,QAAQ,IACjD,GAAGF,EAAQ,CACPZ,EAA+B,MAAjBY,EAAOG,MAAgB,IAAM,KAC3CzB,EAAY0B,KAAKJ,GACjB,IAAMK,EAAiBZ,EAAMa,MAC7BxB,EAAOuB,GACPrB,EAAe,IACfE,EAAgB,IACbO,EAAMc,aAAaf,GAAY,QAElCN,EAAgBX,EAAaiC,kBAQrC,OACI,sBAAKC,UAAU,iBAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,kDACA,qBAAKA,UAAU,kBAAkBC,IAAG,0DAAqD7B,GAAO8B,IAAI,KACpG,uBAAMF,UAAU,aAAhB,gCAAiD,MAAftB,EAAqB,iCAAU,6CAEpEI,EACG,sBAAMkB,UAAU,gBAAhB,SAAiClC,EAAaqC,YAC5C,uBAAMH,UAAU,kBAAkBI,SAAUnB,EAA5C,UACE,uBACIoB,KAAK,OACLC,MAAOhC,EACPiC,SAAU,SAACC,GAAD,OAAOjC,EAAeiC,EAAEC,OAAOH,UAE7C,wBAAQI,QAASzB,EAAjB,8EAGPT,GAAgB,sBAAMwB,UAAU,eAAhB,SAAgCxB,IACjD,sBAAKwB,UAAU,mBAAf,UACI,wBAAQU,QAxBK,WACrB7B,GAAkBD,IAuBV,uFACCA,KAAmBX,EAAYmB,QAC5B,6BACKnB,EAAY0C,KAAI,SAACC,GAAD,OACb,+BAA4B,yDAA4B,MAAfA,EAAKlB,MAAgB,iCAAU,0CAAxE,UAAkGkB,EAAKC,KAAvG,UAAoHD,EAAKE,KAAhHF,EAAKC,KAAKD,EAAKE,gBC/DrCC,MARf,WACE,OACE,qBAAKf,UAAU,MAAf,SACI,cAAC,EAAD,OCQOgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c857ab26.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './ChessBoard.css';\r\nconst Chess = require('chess.js');\r\n\r\nenum ErrorMessage {\r\n    INVALID_DATA = 'Был введен неверный формат данных! Должно быть 4 значения (e2e4).',\r\n    REQUIRED_FIELD = 'Поле обязательно для заполнения!',\r\n    MOVE_IMPOSSIBLE = 'Такой ход невозможен',\r\n    GAME_OVER = 'Игра была успешно завершена.'\r\n}\r\n\r\nconst historyData: any[] = [];\r\n\r\nconst ChessBoard: React.FC = () => {\r\n    const [img, setImg] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1');\r\n    const [coordinates, setCoordinates] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [playerTurn, setPlayerMove] = useState('w');\r\n    const [statusHistory, setStatusHistory] = useState(false);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const chess = new Chess(img);\r\n\r\n    const handleMakeMove = (event: any) => {\r\n        event.preventDefault();\r\n        if (coordinates.length < 1){\r\n            setErrorMessage(ErrorMessage.REQUIRED_FIELD);\r\n            return false;\r\n        } else if (coordinates.length < 4 || coordinates.length > 4){\r\n            setErrorMessage(ErrorMessage.INVALID_DATA);\r\n            return false;\r\n        }\r\n\r\n        const result = chess.move(coordinates, { sloppy: true });\r\n        if(result) {\r\n            setPlayerMove(result.color === 'w' ? 'b' : 'w');\r\n            historyData.push(result);\r\n            const newImg: string = chess.fen();\r\n            setImg(newImg);\r\n            setCoordinates('');\r\n            setErrorMessage('');\r\n            if(chess.game_over()) setGameOver(true);\r\n        }else {\r\n            setErrorMessage(ErrorMessage.MOVE_IMPOSSIBLE);\r\n        }\r\n    };\r\n\r\n    const openHistoryBlock = (): void => {\r\n        setStatusHistory(!statusHistory);\r\n    };\r\n\r\n    return(\r\n        <div className=\"allWrapperPage\">\r\n            <div className=\"wrapperChessBoard\">\r\n                <h1>The game started</h1>\r\n                <img className=\"imageChessBoard\" src={`http://www.fen-to-image.com/image/double/coords/${img}`} alt=\"\"/>\r\n                <span className=\"playerTurn\">Ход {playerTurn === 'w' ? 'белых' : 'черных'}</span>\r\n            </div>\r\n            {gameOver ?\r\n                <span className=\"gameOverBlock\">{ErrorMessage.GAME_OVER}</span>\r\n                : <form className=\"formStrokeShape\" onSubmit={handleMakeMove}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={coordinates}\r\n                        onChange={(e) => setCoordinates(e.target.value)}\r\n                    />\r\n                    <button onClick={handleMakeMove}>Сделать ход</button>\r\n                </form>\r\n            }\r\n            {errorMessage && <span className=\"errorMessage\">{errorMessage}</span>}\r\n            <div className=\"moveHistoryBlock\">\r\n                <button onClick={openHistoryBlock}>История ходов</button>\r\n                {statusHistory && !!historyData.length &&\r\n                    <ul>\r\n                        {historyData.map((item) =>\r\n                            <li key={item.from+item.to}><strong>Ход {item.color === 'w' ? 'белых' : 'черных'}</strong> From: {item.from} - To: {item.to}</li>\r\n                        )}\r\n                    </ul>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ChessBoard;\r\n","import React from 'react';\nimport ChessBoard from './components/ChessBoard/ChessBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ChessBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}